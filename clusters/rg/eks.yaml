apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ekscluster.kro.run
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  schema:
    apiVersion: v1alpha1
    kind: EksCluster
    spec:
      name: string
      region: string
      subnets:
        controlplane:
          subnet1ID: string
          subnet2ID: string
        workers:
          subnet1ID: string
          subnet2ID: string
      accountId: string
      k8sVersion: string
      nodesCount: integer
  resources:
  - id: clusterRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: default
        name: ${schema.spec.name}-cluster-role
      spec:
        name: ${schema.spec.name}-cluster-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - id: nodeRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        namespace: default
        name: ${schema.spec.name}-cluster-node-role
      spec:
        name: ${schema.spec.name}-cluster-node-role
        policies:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
  - id: ekscluster
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        namespace: default
        name: ${schema.spec.name}
      spec:
        name: ${schema.spec.name}
        roleARN: ${clusterRole.status.ackResourceMetadata.arn}
        accessConfig:
          authenticationMode: "API_AND_CONFIG_MAP"
        resourcesVPCConfig:
          endpointPrivateAccess: false
          endpointPublicAccess: true
          subnetIDs:
            - ${schema.spec.subnets.controlplane.subnet1ID}
            - ${schema.spec.subnets.controlplane.subnet2ID}
        #version: ${schema.spec.k8sVersion} a bug needs to be fixed for this to work
  - id: nodegroup
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Nodegroup
      metadata:
        namespace: default
        name: ${schema.spec.name}-nodegroup
      spec:
        name: ${schema.spec.name}-nodegroup
        clusterName: ${schema.spec.name}
        subnets:
          - ${schema.spec.subnets.workers.subnet1ID}
          - ${schema.spec.subnets.workers.subnet2ID}
        nodeRole: ${nodeRole.status.ackResourceMetadata.arn}
        updateConfig:
          maxUnavailable: 1
        scalingConfig:
          minSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
          maxSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
          desiredSize: 3 #${schema.spec.nodesCount} a bug needs to be fixed for this to work
  - id: argocdRole
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: ${schema.spec.name}-argocd-role
      spec:
        name: ${schema.spec.name}-argocd-role
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "AWS": "arn:aws:iam:::role/argocd-hub-role"
                },
                "Action": [
                  "sts:TagSession",
                  "sts:AssumeRole"
                ]
              }
            ]
          }
  - id: argocdSecret
    template:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${schema.spec.name}
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: cluster
        annotations:
          accountId: ${schema.spec.accountId}
          region: ${schema.spec.region}
          oidcProvider: ${ekscluster.status.identity.oidc.issuer}
      type: Opaque
      stringData:
        name: ${schema.spec.name}
        server: "${ekscluster.status.endpoint}"
        config: |
          {
            "awsAuthConfig": {
              "clusterName": "${schema.spec.name}",
              "roleARN": "${argocdRole.status.ackResourceMetadata.arn}"
            },
            "tlsClientConfig": {
              "insecure": false,
              "caData": "${ekscluster.status.certificateAuthority.data}"
            }
          }
  - id: accessEntry
    template:
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: AccessEntry
      metadata:
        namespace: default
        name: ${schema.spec.name}-accessentry
      spec:
        clusterName: ${schema.spec.name}
        accessPolicies:
        - accessScope:
            type: "cluster"
          policyARN: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        principalARN: "${argocdRole.status.ackResourceMetadata.arn}"
  - id: oidcProvider
    template:
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: OpenIDConnectProvider
      metadata:
        namespace: default
        name: ${schema.spec.name}-odic
      spec:
        url: ${ekscluster.status.identity.oidc.issuer}
        clientIDs:
          - sts.amazonaws.com
        thumbprints:
          - '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'

